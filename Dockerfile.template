# base-image for python on any machine using a template variable,
# see more about dockerfile templates here: https://www.balena.io/docs/learn/develop/dockerfile/
FROM balenalib/%%BALENA_MACHINE_NAME%%-python:3.7-buster-run

# use `install_packages` if you need to install dependencies,
# for instance if you need git, just uncomment the line below.
RUN install_packages \
  lsb-release xserver-xorg-video-intel \
  xinit lxsession desktop-file-utils \
  matchbox-keyboard \
  unclutter \
  # Support for Accuview gTouch 21.5" touchscreen
  xserver-xorg-input-evdev \
  xinput \
  chromium \
  x11-xserver-utils \
  vim



# BEGIN ARCH CHROME-VAAPI

RUN apt purge chromium

RUN apt update
RUN apt install xz-utils

RUN curl -o chromium-vaapi-78.0.3904.87-1-x86_64.pkg.tar.xz https://pkgbuild.com/~maximbaz/repo/chromium-vaapi-78.0.3904.87-1-x86_64.pkg.tar.xz
RUN tar -xf chromium-vaapi-78.0.3904.87-1-x86_64.pkg.tar.xz 

RUN curl -Lo icu.pkg.tar.xz https://www.archlinux.org/packages/core/x86_64/icu/download/
RUN tar -xf icu.pkg.tar.xz 

RUN curl -Lo libwebp.pkg.tar.xz https://www.archlinux.org/packages/extra/x86_64/libwebp/download/
RUN tar -xf libwebp.pkg.tar.xz 

RUN curl -Lo libjpeg-turbo.pkg.tar.xz https://www.archlinux.org/packages/extra/x86_64/libjpeg-turbo/download/
RUN tar -xf libjpeg-turbo.pkg.tar.xz 

RUN curl -Lo harfbuzz.pkg.tar.xz https://www.archlinux.org/packages/extra/x86_64/harfbuzz/download/
RUN tar -xf harfbuzz.pkg.tar.xz

RUN curl -Lo re2.pkg.tar.xz https://www.archlinux.org/packages/extra/x86_64/re2/download/
RUN tar -xf re2.pkg.tar.xz 

RUN curl -Lo glibc.pkg.tar.xz https://www.archlinux.org/packages/core/x86_64/glibc/download/
RUN tar -xf glibc.pkg.tar.xz
RUN rm /lib/x86_64-linux-gnu/libm.so.6
RUN ln -s /usr/lib/libm.so.6 /lib/x86_64-linux-gnu/libm.so.6

RUN curl -Lo gcc-libs.pkg.tar.xz https://www.archlinux.org/packages/core/x86_64/gcc-libs/download/
RUN tar -xf gcc-libs.pkg.tar.xz 
RUN rm /usr/lib/x86_64-linux-gnu/libstdc++.so.6
RUN ln -s /usr/lib/libstdc++.so.6 /usr/lib/x86_64-linux-gnu/libstdc++.so.6

RUN curl -Lo freetype2.pkg.tar.xz https://www.archlinux.org/packages/extra/x86_64/freetype2/download/
RUN tar -xf freetype2.pkg.tar.xz 
RUN rm /usr/lib/x86_64-linux-gnu/libfreetype.so.6
RUN ln -s /usr/lib/libfreetype.so.6 /usr/lib/x86_64-linux-gnu/libfreetype.so.6

RUN curl -Lo libva-intel-driver.pkg.tar.xz https://www.archlinux.org/packages/extra/x86_64/libva-intel-driver/download/
RUN tar -xf libva-intel-driver.pkg.tar.xz
RUN ln -s /usr/lib/dri/i965_drv_video.so /usr/lib/x86_64-linux-gnu/dri/i965_drv_video.so


RUN curl -Lo libva.pkg.tar.xz https://www.archlinux.org/packages/extra/x86_64/libva/download/
RUN tar -xf libva.pkg.tar.xz
RUN rm /usr/lib/x86_64-linux-gnu/libva-drm.so.2
RUN rm /usr/lib/x86_64-linux-gnu/libva-x11.so.2
RUN rm /usr/lib/x86_64-linux-gnu/libva.so.2
RUN ln -s /usr/lib/libva-drm.so.2.500.0 /usr/lib/x86_64-linux-gnu/libva-drm.so.2
RUN ln -s /usr/lib/libva-wayland.so.2.500.0 /usr/lib/x86_64-linux-gnu/libva-wayland.so.2
RUN ln -s /usr/lib/libva-x11.so.2.500.0 /usr/lib/x86_64-linux-gnu/libva-x11.so.2
RUN ln -s /usr/lib/libva.so.2.500.0 /usr/lib/x86_64-linux-gnu/libva.so.2

# END ARCH CHROME-VAAPI






COPY ./conf/20-intel.conf /usr/share/X11/xorg.conf.d/20-intel.conf

# disable lxpolkit popup warning
RUN mv /usr/bin/lxpolkit /usr/bin/lxpolkit.bak

RUN echo "#!/bin/bash" > /etc/X11/xinit/xserverrc \
  && echo "" >> /etc/X11/xinit/xserverrc \
  && echo 'exec /usr/bin/X -s 0 dpms -nolisten tcp "$@"' >> /etc/X11/xinit/xserverrc

ENV PYTHONUNBUFFERED 1

# Enable udevd so that plugged dynamic hardware devices show up in our container.
ENV UDEV 1

# Set dbus environment variables
ENV DISPLAY :0
ENV DBUS_SYSTEM_BUS_ADDRESS unix:path=/host/run/dbus/system_bus_socket

COPY ./requirements.txt /code/requirements.txt
RUN pip install -Ur /code/requirements.txt

COPY . /code/
WORKDIR /code/

# main.py will run when container starts up on the device
CMD ["bash","scripts/x86.sh"]
#CMD ["bash"]
